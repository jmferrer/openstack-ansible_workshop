heat_template_version: 2016-04-08

description: Despliegue de un servidor de NFS

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for all compute instances
    constraints:
      - custom_constraint: nova.keypair
    default: tests
  image_id:
    type: string
    label: Image ID
    description: Debian 8 Image to be used
    default: 2873cf16-9fe7-4e55-9e01-9293b3194145
    constraints:
      - custom_constraint: glance.image
  instance_flavor:
    type: string
    label: Instance Flavor
    description: Flavor to be used
    default: 2
    constraints:
      - custom_constraint: nova.flavor
  public_net_id:
    type: string
    label: Public network
    description: Public network
    default: 0e2ff1c5-fc78-4dd8-9c6d-5989794e9e71
  cidr:
    type: string
    label: Network CIDR
    description: The CIDR of the private network.
    default: 192.168.3.0/24
  availability_zone:
    type: string
    label: Availability Zone
    description: Availability Zone
    default: zone3
    constraints:
      - allowed_values:
        - zone1
        - zone2
        - zone3

resources:
  # Security group that allows all from all
  nfs_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: nfs_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  # Network infraestructure
  nfs_private_net:
    type: OS::Neutron::Net

  nfs_private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: nfs_private_net }
      cidr: { get_param: cidr }
      dns_nameservers: [ "192.168.43.1", "192.168.32.1" ]
      ip_version: 4

  nfs_private_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: public }

  nfs_private_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: nfs_private_router }
      subnet: { get_resource: nfs_private_subnet }


  # create server ports (ip addresses)
  # needed to configure ansible inventory and /etc/hosts
  nfs_server_port:
    type: OS::Neutron::Port
    properties:
       network: { get_resource: nfs_private_net }
       security_groups:
         - { get_resource: nfs_security_group }


  # nfs_server
  nfs_server_public:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: nfs_server_port }

  nfs_server:
    type: OS::Nova::Server
    properties:
      name: nfs_server
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_flavor }
      networks:
        - port: { get_resource: nfs_server_port }
      availability_zone: { get_param: availability_zone }
      user_data_format: RAW
      user_data: |
          #!/bin/bash
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get -y install nfs-kernel-server

          mkdir /var/lib/exports

          mkdir /var/lib/exports/drupal
          chmod 777 /var/lib/exports/drupal

          echo """
          /var/lib/exports    192.168.0.0/255.255.0.0(rw,sync,no_root_squash,no_all_squash)
          """ > /etc/exports

          systemctl restart nfs-kernel-server

  nfs_record:
    type: OS::Designate::Record
    properties:
      name: nfs.jmferrer.os.paradigmadigital.com.
      type: A
      domain: jmferrer.os.paradigmadigital.com.
      data: { get_attr: [nfs_server_public, floating_ip_address] }
